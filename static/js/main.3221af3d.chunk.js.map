{"version":3,"sources":["components/WeatherDetails/Headline/Headline.module.scss","containers/Login/Login.module.scss","components/WeatherDetails/WeatherDetails.module.scss","components/WeatherDetails/Days/Day/Day.module.scss","components/Locations/Location/Location.module.scss","components/UI/BackDrop/BackDrop.module.css","components/SearchBar/SearchBar.module.scss","components/UI/Spinner/Spinner.module.css","components/WeatherDetails/Days/Days.module.scss","containers/Main/Main.module.scss","components/Locations/Locations.module.scss","containers/Favorites/Favorites.module.scss","components/UI/ErrorModal/ErrorModal.module.css","serviceWorker.js","service/utilService.js","store/reducer/forecastReducer.js","store/actions/actionTypes.js","store/reducer/favoriteReducer.js","store/reducer/authReducer.js","components/UI/BackDrop/BackDrop.jsx","components/Header/Header.jsx","components/SearchBar/SearchBar.jsx","components/WeatherDetails/Headline/Headline.jsx","components/UI/Spinner/Spinner.jsx","components/WeatherDetails/Days/Day/Day.jsx","components/WeatherDetails/Days/Days.jsx","components/WeatherDetails/WeatherDetails.jsx","service/axiosService.js","service/favoriteService.js","service/weatherService.js","store/actions/forecast.js","store/actions/favorites.js","containers/Main/Main.jsx","containers/Login/Login.jsx","store/actions/auth.js","containers/Logout/Logout.jsx","components/Locations/Location/Location.jsx","components/Locations/Locations.jsx","containers/Favorites/Favorites.jsx","components/UI/ErrorModal/ErrorModal.jsx","App.js","index.js"],"names":["module","exports","headline","headline-left","headline-date","headline-location","add-btn","added","login","form-header","input-container","details","details-bottom","details-conditions","day","day-body","degrees","location","location-top","location-bottom","Backdrop","search-form","stretchDown","loader","load6","round","days","main","locations","favorites","error-modal","Boolean","window","hostname","match","updateObject","state","updatedProperties","Object","objectSpread","initialState","fiveDayForecast","currentConditions","currentLocation","isLoadingForecast","isError","reducer","arguments","length","undefined","action","type","forecast","DailyForecasts","isLoading","updatedLocation","isOnFavorites","favoriteList","token","userId","error","loading","idToken","backdrop","props","show","react_default","a","createElement","className","classes","onClick","clicked","Header","_useState","useState","_useState2","slicedToArray","isNavOpen","setNavStatus","toggleNavHandler","concat","react_router_dom","to","exact","isAuth","BackDrop","Icon","searchBar","dropDownList","cityList","map","city","key","Key","cityClicked","LocalizedName","onSubmit","find","name","autoComplete","placeholder","onChange","changed","value","localTime","LocalObservationDateTime","moments","format","addToFavorites","country","spinner","Temperature","Maximum","Value","Minimum","toFixed","Night","dayIcon","Day","moment","Date","src","alt","IconPhrase","weatherDetails","detailsBody","Spinner","dailyForecasts","Headline","onAddToFavorites","Metric","WeatherText","Days","Fragment","weatherAxios","axios","create","baseURL","interceptors","response","use","res","console","log","Error","dbAxios","toggleLocationFromFavorites","_ref","asyncToGenerator","regenerator_default","mark","_callee","conditions","favoriteLocation","wrap","_context","prev","next","getFavorites","sent","fav","_addToFavorites","_removeFromFavorites","abrupt","stop","_x","_x2","apply","this","_ref2","_callee2","_context2","delete","_id","_x3","_ref3","_callee3","_context3","post","_x4","_ref4","_callee4","_context4","get","entries","data","e","_e","rest","favoriteService","API_KEY","getCityNames","getForecastByCity","cityDetails","_getDefaultCity","Country","getFiveDayForecast","values","some","getCurrentConditions","cityKey","_ref5","_callee5","_context5","weatherService","setForecast","toggleForecastSpinner","dispatch","t0","updateFavoriteLocation","setFavorites","Main","cityName","cityNameChangeHandler","ev","target","replace","_this","setState","findCityHandler","preventDefault","onGetCityNames","getForecastHandler","onForecastLoad","closeDropDownHandler","SearchBar","WeatherDetails","Component","connect","forecastActions","cityNameList","getState","Login","credentials","email","password","signInUser","onAuth","inputChangeHandler","_ev$target","propertyName","defineProperty","_this$state$credentia","redirect","isAuthenticated","react_router","minLength","auth","authData","returnSecureToken","localId","Logout","onLogout","weatherIcon","WeatherIcon","locationDisplay","showSpinner","locationClicked","Locations","loadingCurrentWeather","locationClickHandler","onGetCurrentWeather","history","push","_this2","locationItems","loc","Location","actions","withRouter","Favorites","onLoadFavorites","onClearFavorites","components_Locations_Locations","favorite","onCloseErrorModal","setTimeout","onError","ErrorModal","routes","path","component","components_Header_Header","rootReducer","combineReducers","forecastReducer","favoriteReducer","authReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3221af3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headline\":\"Headline_headline__2hs-N\",\"headline-left\":\"Headline_headline-left__3rneI\",\"headline-date\":\"Headline_headline-date__1LpWP\",\"headline-location\":\"Headline_headline-location__asG7M\",\"add-btn\":\"Headline_add-btn__3sEuR\",\"added\":\"Headline_added__22oRA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__xWprC\",\"form-header\":\"Login_form-header__2O8O8\",\"input-container\":\"Login_input-container__L2gha\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"details\":\"WeatherDetails_details__2KvKc\",\"details-bottom\":\"WeatherDetails_details-bottom__1lK_O\",\"details-conditions\":\"WeatherDetails_details-conditions__35Vcx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"day\":\"Day_day__3qbX3\",\"day-body\":\"Day_day-body__3qMpc\",\"degrees\":\"Day_degrees__2dSNp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"location\":\"Location_location__3Mtd1\",\"location-top\":\"Location_location-top__1soCQ\",\"location-bottom\":\"Location_location-bottom__1kqEX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"BackDrop_Backdrop__RsEcj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search-form\":\"SearchBar_search-form__39gya\",\"stretchDown\":\"SearchBar_stretchDown__dxbEH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Spinner_loader__1xzsf\",\"load6\":\"Spinner_load6__OqUkj\",\"round\":\"Spinner_round__1XHXT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"days\":\"Days_days__2_ICG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__2Pev8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"locations\":\"Locations_locations__27Mx6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"favorites\":\"Favorites_favorites__3FdSJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error-modal\":\"ErrorModal_error-modal__23H_g\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const updateObject = (state,updatedProperties) => {\r\n    return {\r\n        ...state,\r\n        ...updatedProperties\r\n    }\r\n}","import * as actions from '../actions/actionTypes'\r\nimport {updateObject} from '../../service/utilService'\r\n\r\nconst initialState = {\r\n    fiveDayForecast: null,\r\n    currentConditions: null,\r\n    currentLocation: null,\r\n    isLoadingForecast: false,\r\n    isError: false\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actions.SET_FORECAST:\r\n            let { forecast } = action\r\n            return updateObject(state, {\r\n                fiveDayForecast: forecast.DailyForecasts,\r\n                currentLocation: forecast.location,\r\n                currentConditions: forecast.currentConditions\r\n            })\r\n\r\n        case actions.TOGGLE_FORECAST_SPINNER:\r\n            let { isLoading } = action\r\n            return updateObject(state, { isLoadingForecast: isLoading })\r\n\r\n        case actions.UPDATE_FAVORITE_LOCATION:\r\n            let { updatedLocation } = action\r\n            if (!updatedLocation) return updateObject(state, {\r\n                currentLocation: {\r\n                    ...state.currentLocation,\r\n                    isOnFavorites: !state.currentLocation.isOnFavorites\r\n                }\r\n            })\r\n            return updateObject(state,{currentLocation: updatedLocation})\r\n\r\n        case actions.HANDLE_ERROR:\r\n            return {\r\n                ...state,\r\n                isError: true\r\n            }\r\n        case actions.CLOSE_ERROR_MODAL:\r\n            return updateObject(state,{isError: false})\r\n                \r\n    }\r\n    return state;\r\n};\r\n\r\nexport default reducer;","export const GET_FIVE_DAY_FORECAST = 'GET_FIVE_DAY_FORECAST'\r\nexport const GET_CURRENT_LOCATION = 'GET_CURRENT_LOCATION'\r\nexport const SET_FORECAST = 'SET_FORECAST'\r\nexport const TOGGLE_FORECAST_SPINNER = 'TOGGLE_FORECAST_SPINNER'\r\nexport const HANDLE_ERROR = 'HANDLE_ERROR'\r\nexport const CLOSE_ERROR_MODAL = 'CLOSE_ERROR_MODAL'\r\n\r\nexport const SET_FAVORITES = 'SET_FAVORITES'\r\nexport const GET_FAVORITES = 'GET_FAVORITES'\r\nexport const UPDATE_FAVORITE_LOCATION = 'UPDATE_FAVORITE_LOCATION'\r\nexport const CLEAR_FAVORITES = 'CLEAR_FAVORITES'\r\n\r\nexport const AUTH_START = 'AUTH_START'\r\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS'\r\nexport const AUTH_FAIL = 'AUTH_FAIL'\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT'\r\n","import * as actions from '../actions/actionTypes'\r\nimport { updateObject } from '../../service/utilService'\r\n\r\n\r\nconst initialState = {\r\n    favoriteList: null,\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actions.SET_FAVORITES:\r\n            let { favorites } = action\r\n            return updateObject(state, { favoriteList: favorites })\r\n        case actions.CLEAR_FAVORITES:\r\n            return updateObject(state, { favoriteList: null })\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n    token:null,\r\n    userId:null,\r\n    error:null,\r\n    loading:null\r\n}\r\n\r\nconst reducer = (state = initialState,action) => {\r\n    switch(action.type) {\r\n        case actionTypes.AUTH_START:\r\n        return {\r\n            ...state,\r\n            error:null,\r\n            loading:true\r\n        }\r\n        case actionTypes.AUTH_SUCCESS:\r\n        return {\r\n            ...state,\r\n            error:null,\r\n            token:action.idToken,\r\n            userId:action.userId,\r\n            loading:false\r\n        }\r\n        case actionTypes.AUTH_FAIL:\r\n        return {\r\n            ...state,\r\n            error:action.error,\r\n            loading:false\r\n        }\r\n        case actionTypes.AUTH_LOGOUT:\r\n        return {\r\n            ...state,\r\n            token:null,\r\n            userId:null,\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react'\r\nimport classes from './BackDrop.module.css'\r\n\r\nconst backdrop = props => (\r\n    props.show ? <div className={classes.Backdrop} onClick={props.clicked}></div> : null\r\n)\r\n\r\nexport default backdrop","import React, { useState } from 'react'\r\nimport './Header.scss'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport BackDrop from '../UI/BackDrop/BackDrop'\r\n\r\n\r\nconst Header = props => {\r\n    const [isNavOpen, setNavStatus] = useState(false)\r\n    const toggleNavHandler = () => {\r\n        setNavStatus(() => !isNavOpen)\r\n    }\r\n    return (\r\n        <nav className='header' >\r\n            <h2 className='logo'>My Weather</h2>\r\n            <section className={`links ${isNavOpen ? 'show' : 'hide'}`}>\r\n                <NavLink to=\"/\" exact onClick={toggleNavHandler}>Main</NavLink>\r\n                <NavLink to=\"/favorites\" exact onClick={toggleNavHandler}>Favorites</NavLink>\r\n                {props.isAuth ? <NavLink to=\"/logout\" exact onClick={toggleNavHandler}>Logout</NavLink>\r\n                    : <NavLink to=\"/login\" exact onClick={toggleNavHandler}>Login</NavLink>}\r\n            </section>\r\n            <BackDrop show={isNavOpen} clicked={toggleNavHandler} />\r\n            <button className='burger-btn' onClick={toggleNavHandler}><Icon>dashboard</Icon></button>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport classes from './SearchBar.module.scss'\r\n\r\nconst searchBar = props => {\r\n    let dropDownList = props.cityList && (\r\n        <ul>\r\n            {props.cityList.map(city => <li\r\n                key={city.Key}\r\n                onClick={() => props.cityClicked(city)}>{city.LocalizedName}\r\n            </li>)}\r\n        </ul>\r\n    )\r\n    return (\r\n        <form onSubmit={props.find} className={classes['search-form']}>\r\n            <input type=\"text\" name=\"city\" autoComplete=\"off\" placeholder=\"Planning on a Trip ?\"\r\n                onChange={props.changed} value={props.value} />\r\n            {dropDownList}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default searchBar","import React from 'react'\r\nimport classes from './Headline.module.scss'\r\nimport moments from 'moment'\r\nimport Icon from '@material-ui/core/Icon'\r\n\r\nconst headline = props => {\r\n    const localTime = props.forecast.LocalObservationDateTime\r\n    return (\r\n        <div className={classes.headline}>\r\n            <section className={classes['headline-left']}>\r\n                <section className={classes['headline-date']}>\r\n                    <h1>{moments(localTime).format('MMMM') + ' ' + moments(localTime).format('D')}</h1>\r\n                    <button className={classes['add-btn']} onClick={props.addToFavorites}>\r\n                        <Icon className={classes['add-btn']}>\r\n                            {props.location.isOnFavorites ? 'favorite' : 'favorite_border'}\r\n                        </Icon>\r\n                    </button>\r\n                </section>\r\n                <section className={classes['headline-location']}>\r\n                    <h2>{props.location.city}</h2>\r\n                    <h1>{props.location.country}</h1>\r\n                </section>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default headline","import React from 'react'\r\nimport classes from './Spinner.module.css'\r\n\r\nconst spinner = () => (<div className={classes.loader}>Loading...</div>)\r\n\r\nexport default spinner","import React from 'react'\r\nimport moment from 'moment'\r\nimport classes from './Day.module.scss'\r\n\r\n\r\nconst day = props => {\r\n    let maxTemperature = props.day.Temperature.Maximum.Value\r\n    let minTemperature = props.day.Temperature.Minimum.Value\r\n    let avgTemperature = ((+maxTemperature + +minTemperature ) / 2).toFixed(1)\r\n    let nightIcon = props.day.Night.Icon < 10 ? '0' + props.day.Night.Icon : props.day.Night.Icon\r\n    let dayIcon = props.day.Day.Icon < 10 ? '0' + props.day.Day.Icon : props.day.Day.Icon\r\n    return (\r\n        <div className={classes.day}>\r\n            <h2>{moment(props.day.Date).format('ddd')}</h2>\r\n            <section className={classes['day-body']}>\r\n                <img src={`https://developer.accuweather.com/sites/default/files/${dayIcon}-s.png`} alt={props.day.Night.IconPhrase} />\r\n                <p>{props.day.Day.IconPhrase}</p>\r\n                <section className={classes.degrees}>\r\n                    <div>{props.day.Temperature.Maximum.Value}</div>\r\n                    <div>{props.day.Temperature.Minimum.Value}</div>\r\n                </section>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default day","import React from 'react'\r\nimport Day from './Day/Day'\r\nimport classes from './Days.module.scss'\r\n\r\n\r\nconst days = props => {\r\n    return (\r\n        <div className={classes.days}>\r\n            <ul>\r\n                {props.forecast.map(day => <Day key={day.Date} day={day}/>)}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default days","import React from 'react';\r\nimport classes from './WeatherDetails.module.scss'\r\nimport Headline from './Headline/Headline'\r\nimport Spinner from '../UI/Spinner/Spinner'\r\nimport Days from './Days/Days'\r\n\r\n\r\nconst weatherDetails = props => {\r\n    let detailsBody = <Spinner />\r\n    if (props.dailyForecasts && !props.isLoading) detailsBody = (\r\n        <div className={classes.details}>\r\n            <Headline forecast={props.currentConditions}\r\n                location={props.currentLocation}\r\n                addToFavorites={props.onAddToFavorites} />\r\n            <section className={classes['details-bottom']}>\r\n                <section className={classes['details-conditions']}>\r\n                    <h2>{props.currentConditions.Temperature.Metric.Value}&#730;</h2>\r\n                    <h1>{props.currentConditions.WeatherText}</h1>\r\n                </section>\r\n                <Days forecast={props.dailyForecasts} />\r\n            </section>\r\n        </div>\r\n    )\r\n    return <>{detailsBody}</>\r\n}\r\n\r\n\r\nexport default weatherDetails;","import axios from 'axios';\r\n\r\n\r\n//  WHEATER AXIOS\r\n\r\nexport const weatherAxios = axios.create({\r\n    baseURL:'https://dataservice.accuweather.com/'\r\n})\r\n\r\nweatherAxios.interceptors.response.use(res => res,error => {\r\n    console.log('error : ',error);\r\n    throw new Error(error)\r\n})\r\n\r\n//  DB AXIOS\r\n\r\nexport const dbAxios = axios.create({\r\n    baseURL:'https://my-weather-65d57.firebaseio.com/'\r\n})\r\n\r\ndbAxios.interceptors.response.use(res => res,error => {\r\n    console.log('error : ',error);\r\n    throw new Error(error)\r\n})\r\n\r\n\r\n","import * as axios from './axiosService'\r\n\r\n\r\nconst toggleLocationFromFavorites = async (location, conditions) => {\r\n    location.conditions = conditions\r\n    const favorites = await getFavorites()\r\n    const favoriteLocation = favorites.find(fav => fav.Key == location.Key)\r\n    if (!favoriteLocation) await _addToFavorites(location)\r\n    else await _removeFromFavorites(favoriteLocation)\r\n    location.isOnFavorites = !favoriteLocation\r\n    return location\r\n}\r\n\r\nconst _removeFromFavorites = async (location) => {\r\n    await axios.dbAxios.delete(`favorites/${location._id}.json`)\r\n    return location\r\n}\r\n\r\nconst _addToFavorites = async (location) => {\r\n    await axios.dbAxios.post('favorites.json', location)\r\n    return location\r\n}\r\n\r\nconst getFavorites = async () => {\r\n    let response = await axios.dbAxios.get('favorites.json')\r\n    return Object.entries(response.data).map(e => {\r\n        const [_id, rest] = e\r\n        return { _id, ...rest }\r\n    })\r\n}\r\n\r\nexport default {\r\n    getFavorites,\r\n    toggleLocationFromFavorites\r\n}\r\n","/* eslint-disable import/first */\r\n\r\nconst API_KEY = 'CIqHWgxAnuE2qFgvJs2bJwVSZG3hRGGk'\r\nimport favoriteService from './favoriteService'\r\nimport * as axios  from './axiosService'\r\n\r\nconst getCityNames = async (name) => {\r\n    let response = await axios.weatherAxios.get(`locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${name}`)\r\n    return response.data\r\n}\r\n\r\nconst getForecastByCity = async (cityDetails) => {\r\n    if (!cityDetails) cityDetails = await _getDefaultCity()\r\n    let city = cityDetails.city || cityDetails.LocalizedName\r\n    let country = cityDetails.country || cityDetails.Country.LocalizedName\r\n    let {Key} = cityDetails\r\n    let forecast = await getFiveDayForecast(Key)\r\n    forecast.location = { city, Key, country }\r\n    let favorites = await favoriteService.getFavorites()\r\n    forecast.location.isOnFavorites = Object.values(favorites).some(fav => fav.Key == forecast.location.Key)\r\n    forecast.currentConditions = await getCurrentConditions(Key)\r\n    return forecast\r\n}\r\n\r\nconst getFiveDayForecast = async (cityKey) => {\r\n    let response = await axios.weatherAxios.get(`forecasts/v1/daily/5day/${cityKey}?apikey=${API_KEY}&metric=true`)\r\n    return response.data\r\n}\r\n\r\nconst getCurrentConditions = async (cityKey) => {\r\n    let response = await axios.weatherAxios.get(`currentconditions/v1/${cityKey}?apikey=${API_KEY}`)\r\n    return response.data[0]\r\n}\r\n\r\nconst _getDefaultCity = async() => {\r\n    let response = await axios.dbAxios.get(`default.json`)\r\n    return response.data.location\r\n}\r\n\r\nexport default {\r\n    getForecastByCity,\r\n    getCityNames\r\n}","import * as actionTypes from './actionTypes'\r\nimport weatherService from '../../service/weatherService'\r\n\r\n// Action creators :\r\n\r\nexport const setForecast = forecast => {\r\n    return {\r\n        type: actionTypes.SET_FORECAST,\r\n        forecast\r\n    }\r\n}\r\n\r\nexport const toggleForecastSpinner = isLoading => {\r\n    return {\r\n        type: actionTypes.TOGGLE_FORECAST_SPINNER,\r\n        isLoading\r\n    }\r\n}\r\n\r\nexport const handleError = () => {\r\n    return {\r\n        type:actionTypes.HANDLE_ERROR\r\n    }\r\n}\r\n\r\nexport const closeErrorModal = () => {\r\n    return {\r\n        type:actionTypes.CLOSE_ERROR_MODAL\r\n    }\r\n}\r\n\r\n// Actions :\r\n\r\nexport const getFiveDayForecast = cityDetails => {\r\n    return async(dispatch) => {\r\n        dispatch(toggleForecastSpinner(true))\r\n        try { \r\n            let forecast = await weatherService.getForecastByCity(cityDetails)\r\n            dispatch(toggleForecastSpinner(false))\r\n            dispatch(setForecast(forecast))\r\n        } catch (err) {\r\n            dispatch(handleError())\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCityNames = cityName => {\r\n    return async(dispatch) => {\r\n        try {\r\n            let cityNameList = await weatherService.getCityNames(cityName)\r\n            if (cityNameList.length === 1) dispatch(getFiveDayForecast(cityNameList[0]))\r\n            else return cityNameList\r\n        } catch (err) {\r\n            dispatch(handleError()) \r\n        }\r\n    }\r\n}","import * as actionTypes from './actionTypes'\r\nimport favoriteService from '../../service/favoriteService'\r\n\r\n\r\n// Action creators :\r\n\r\nexport const updateFavoriteLocation = updatedLocation => {\r\n    return {\r\n        type: actionTypes.UPDATE_FAVORITE_LOCATION,\r\n        updatedLocation\r\n    }\r\n}\r\n\r\nexport const setFavorites = (favorites) => {\r\n    return {\r\n        type: actionTypes.SET_FAVORITES,\r\n        favorites\r\n    }\r\n}\r\n\r\nexport const clearFavorites = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_FAVORITES\r\n    }\r\n}\r\n\r\n// Actions :\r\n\r\nexport const addToFavorites = () => {\r\n    return async (dispatch, getState) => {\r\n        let location = getState().forecast.currentLocation\r\n        let conditions = getState().forecast.currentConditions\r\n        dispatch(updateFavoriteLocation())\r\n        let updatedLocation = await favoriteService.toggleLocationFromFavorites(location, conditions)\r\n        dispatch(updateFavoriteLocation(updatedLocation))\r\n    }\r\n}\r\n\r\nexport const loadFavorites = () => {\r\n    return async (dispatch) => {\r\n        let favorites = await favoriteService.getFavorites()\r\n        dispatch(setFavorites(favorites))\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport SearchBar from '../../components/SearchBar/SearchBar'\r\nimport WeatherDetails from '../../components/WeatherDetails/WeatherDetails'\r\nimport * as forecastActions from '../../store/actions/forecast'\r\nimport * as favoriteActions from '../../store/actions/favorites'\r\nimport classes from './Main.module.scss'\r\n\r\n\r\nclass Main extends Component {\r\n    state = {\r\n        cityName: '',\r\n        cityList: null\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let { dailyForecasts } = this.props\r\n        if (!dailyForecasts) this.props.onForecastLoad()\r\n    }\r\n\r\n    cityNameChangeHandler = ev => {\r\n        let { value: cityName } = ev.target\r\n        cityName = cityName.replace(/[^A-Za-z\\s]/ig, '')\r\n        this.setState({ cityName })\r\n    }\r\n\r\n    findCityHandler = async (ev) => {\r\n        ev.preventDefault()\r\n        let { cityName } = this.state\r\n        let cityList = await this.props.onGetCityNames(cityName)\r\n        this.setState({ cityList, cityName: '' })\r\n    }\r\n\r\n    getForecastHandler = async (city) => {\r\n        this.setState({ cityList: null })\r\n        await this.props.onForecastLoad(city)\r\n    }\r\n\r\n    closeDropDownHandler = () => {\r\n        this.setState({ cityList: null })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <section className={classes.main} onClick={this.closeDropDownHandler}>\r\n                <SearchBar\r\n                    value={this.state.cityName}\r\n                    changed={this.cityNameChangeHandler}\r\n                    find={this.findCityHandler}\r\n                    cityList={this.state.cityList}\r\n                    cityClicked={this.getForecastHandler}\r\n                />\r\n                <WeatherDetails\r\n                    dailyForecasts={this.props.dailyForecasts}\r\n                    currentConditions={this.props.currentConditions}\r\n                    currentLocation={this.props.currentLocation}\r\n                    isLoading={this.props.isLoading}\r\n                    onAddToFavorites={this.props.onAddToFavorites}\r\n                />\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        dailyForecasts: state.forecast.fiveDayForecast,\r\n        currentConditions: state.forecast.currentConditions,\r\n        currentLocation: state.forecast.currentLocation,\r\n        isLoading: state.forecast.isLoadingForecast\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onForecastLoad: (city) => dispatch(forecastActions.getFiveDayForecast(city)),\r\n        onGetCityNames: (cityName) => dispatch(forecastActions.getCityNames(cityName)),\r\n        onAddToFavorites: () => dispatch(favoriteActions.addToFavorites())\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","import React, { Component } from 'react';\r\nimport {Redirect} from 'react-router-dom'\r\nimport classes from './Login.module.scss';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../store/actions/auth'\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        credentials: {\r\n            email: 'a@b.com',\r\n            password: 123456\r\n        }\r\n    }\r\n\r\n    signInUser = ev => {\r\n        ev.preventDefault()\r\n        this.props.onAuth(this.state.credentials)\r\n    }\r\n\r\n    inputChangeHandler = ev => {\r\n        const { name: propertyName, value } = ev.target\r\n        const credentials = { ...this.state.credentials, [propertyName]: value }\r\n        this.setState({ credentials })\r\n    }\r\n\r\n    render() {\r\n        let { email, password } = this.state.credentials\r\n        let redirect = this.props.isAuthenticated ? <Redirect to=\"/\"/> : null\r\n        return (\r\n            <div className={classes.login}>\r\n                {redirect}\r\n                <form onSubmit={this.signInUser}>\r\n                    <section className={classes['form-header']}>\r\n                        <h1>Login</h1>\r\n                        <div className={classes['input-container']}>\r\n                            <input type=\"email\" name=\"email\" placeholder=\"someone@somewhere.com\" value={email} onChange={this.inputChangeHandler} />\r\n                            <Icon>perm_identity</Icon>\r\n                        </div>\r\n                        <div className={classes['input-container']}>\r\n                            <input type=\"password\" name=\"password\" value={password} onChange={this.inputChangeHandler} minLength={6}/>\r\n                            <Icon>lock</Icon>\r\n                        </div>\r\n                    </section>\r\n                    <button type=\"submit\">Log in</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticated: !!state.auth.token\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: credentials => dispatch(actions.auth(credentials))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Login);","import * as actionTypes from './actionTypes'\r\nimport axios from 'axios'\r\nconst API_KEY = 'AIzaSyDdA3fGVwJ9GFspbK_uOOAY4t6pJllkBpE'\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START\r\n    }\r\n}\r\n\r\nexport const authSuccess = ({ localId: userId, idToken }) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        userId,\r\n        idToken\r\n    }\r\n}\r\n\r\nexport const authFail = error => {\r\n    return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        error\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return {\r\n        type: actionTypes.AUTH_LOGOUT\r\n    }\r\n}\r\n\r\nexport const auth = authData => {\r\n    authData.returnSecureToken = true\r\n    return async (dispatch) => {\r\n        dispatch(authStart())\r\n        try {\r\n            const res = await axios.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${API_KEY}`, authData)\r\n            dispatch(authSuccess(res.data))\r\n\r\n        } catch (err) {\r\n            console.log('err : ', err);\r\n            dispatch(authFail(err))\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux'\r\nimport * as actions from '../../store/actions/auth'\r\n\r\nclass Logout extends Component {\r\n    state = {  }\r\n\r\n    componentDidMount() {\r\n        this.props.onLogout()\r\n    }\r\n    render() { \r\n        return ( \r\n            <Redirect to=\"/login\"/>\r\n         );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLogout: () => dispatch(actions.logout())\r\n    }\r\n}\r\n \r\nexport default connect(null,mapDispatchToProps)(Logout);","import React from 'react'\r\nimport classes from './Location.module.scss'\r\nimport Spinner from '../../UI/Spinner/Spinner'\r\n\r\nconst location = props => {\r\n    const weatherIcon = (props.location.conditions.WeatherIcon) < 10 ? '0' + props.location.conditions.WeatherIcon : props.location.conditions.WeatherIcon\r\n    const locationDisplay = props.showSpinner ? <Spinner /> : \r\n    (\r\n        <>\r\n            <section className={classes['location-top']}>\r\n                <h2>{props.location.city}</h2>\r\n                <img src={`https://developer.accuweather.com/sites/default/files/${weatherIcon}-s.png`} alt=\"\"/>\r\n            </section>\r\n            <section className={classes['location-bottom']}>\r\n                <h2>{props.location.conditions.Temperature.Metric.Value}&#730;</h2>\r\n                <h1>{props.location.conditions.WeatherText}</h1>\r\n            </section>\r\n        </>\r\n       \r\n    )\r\n    return (\r\n        <div className={classes.location} onClick={props.locationClicked}>\r\n            {locationDisplay}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\n\r\nexport default location","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom'\r\nimport Location from './Location/Location'\r\nimport Spinner from '../UI/Spinner/Spinner'\r\nimport classes from './Locations.module.scss'\r\nimport * as actions from '../../store/actions/forecast'\r\n\r\n// TODO : \r\n// Change to stateless and move store connection to father cmp\r\n\r\nclass Locations extends Component {\r\n    state = {\r\n        loadingCurrentWeather: null\r\n    }\r\n\r\n    locationClickHandler = async (location) => {\r\n        this.setState({ loadingCurrentWeather: location.city })\r\n        await this.props.onGetCurrentWeather(location)\r\n        this.props.history.push(`/${location.city}`)\r\n    }\r\n\r\n    render() {\r\n        const locationItems = !this.props.locations ? <Spinner /> :\r\n            this.props.locations.map(loc => (\r\n                <Location location={loc}\r\n                    key={loc.Key}\r\n                    locationClicked={() => this.locationClickHandler(loc)}\r\n                    showSpinner={this.state.loadingCurrentWeather === loc.city} />\r\n            ))\r\n        return <ul className={classes.locations}>{locationItems}</ul>\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onGetCurrentWeather: (cityName) => dispatch(actions.getFiveDayForecast(cityName))\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(withRouter(Locations))","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Locations from '../../components/Locations/Locations'\r\nimport * as actions from '../../store/actions/favorites'\r\nimport classes from './Favorites.module.scss'\r\n\r\nclass Favorites extends Component {\r\n    state = {}\r\n\r\n    async componentDidMount() {\r\n        await this.props.onLoadFavorites()\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.props.onClearFavorites()\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <section className={classes.favorites}>\r\n                <Locations locations={this.props.favoriteList}/>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        favoriteList: state.favorite.favoriteList,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLoadFavorites: () => dispatch(actions.loadFavorites()),\r\n        onClearFavorites: () => dispatch(actions.clearFavorites()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);","import React from 'react'\r\nimport classes from './ErrorModal.module.css'\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../../store/actions/forecast'\r\n\r\n\r\nconst errorModal = props => {\r\n    setTimeout(() => {\r\n        return props.onCloseErrorModal()\r\n    }, 5000)\r\n    return (\r\n        <div className={classes['error-modal']}>\r\n            Something Went Wrong.\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onCloseErrorModal: () => dispatch(actions.closeErrorModal()),\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(errorModal)","import React from 'react';\r\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nimport Header from './components/Header/Header'\r\nimport Main from './containers/Main/Main'\r\nimport Login from './containers/Login/Login'\r\nimport Logout from './containers/Logout/Logout'\r\nimport Favorites from './containers/Favorites/Favorites'\r\nimport ErrorModal from './components/UI/ErrorModal/ErrorModal'\r\nimport './App.css';\r\n\r\n\r\nconst App = props => {\r\n  const onError = props.isError ? <ErrorModal /> : null\r\n  const routes = props.isAuthenticated ?\r\n    <Switch>\r\n      <Route path=\"/favorites\" component={Favorites} />\r\n      <Route path=\"/login\" component={Login} />\r\n      <Route path=\"/logout\" component={Logout} />\r\n      <Route path=\"/:cityName?\" component={Main} />\r\n      {/* <Redirect to=\"/\" /> */}\r\n    </Switch> :\r\n    <Switch>\r\n      <Route path=\"/login\" component={Login} />\r\n      <Redirect to=\"/login\" />\r\n    </Switch>\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        {onError}\r\n        <Header isAuth={props.isAuthenticated} />\r\n        {routes}\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isError: state.forecast.isError,\r\n    isAuthenticated: !!state.auth.token\r\n  };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, null)(App)\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport forecastReducer from './store/reducer/forecastReducer'\r\nimport favoriteReducer from './store/reducer/favoriteReducer'\r\nimport authReducer from './store/reducer/authReducer'\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst rootReducer = combineReducers({\r\n    forecast: forecastReducer,\r\n    favorite:favoriteReducer,\r\n    auth: authReducer\r\n})\r\n\r\nconst logger = store => {\r\n    return next => {\r\n        return action => {\r\n            const result = next(action)\r\n            return result\r\n        }\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk)));\r\n\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}